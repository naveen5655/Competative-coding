#include <bits/stdc++.h>
using namespace std;

struct AVLNode{
    int data;
    int h;
    AVLNode* left;
    AVLNode* right;
    AVLNode(int x){
        data = x; h = 1; left = right = NULL;
    }
};

int bf(AVLNode* node){
    int leftHeight = (node->left==NULL)?0:node->left->h;
    int rightHeight = (node->right==NULL)?0:node->right->h;
    return leftHeight - rightHeight;
}

void updateHeight(AVLNode* root){
    int leftHeight = (root->left==NULL)?0:root->left->h;
    int rightHeight = (root->right==NULL)?0:root->right->h;
    root->h = 1 + max(leftHeight, rightHeight);
}

AVLNode* leftRotate(AVLNode* root){
    auto newroot = root->right;
    auto t2 = root->right->left;
    root->right = t2;
    updateHeight(root);
    newroot->left = root;
    updateHeight(newroot);
}

AVLNode* rightRotate(AVLNode* root){
    auto newroot = root->left;
    auto t2 = newroot->right;
    root->left = t2;
    updateHeight(root);
    newroot->right = root;
    updateHeight(newroot);
}

AVLNode* insert(AVLNode* root, int x){
    if(root == NULL) return new AVLNode(x);
    if(x < root->data){
        root->left = insert(root->left, x);
    } else {
        root->right = insert(root->right, x);
    }
    updateHeight(root);

    if(bf(root) == 2){ // LEFT Heavy
        if(bf(root->left) == 1){ // LL
            root = rightRotate(root);
        } else { // LR
            root->left = leftRotate(root->left);
            root = rightRotate(root);
        }
    } else if(bf(root) == -2) { // RIGHT Heavy
        if(bf(root->right) == -1){ // RR
            root = leftRotate(root);
        } else { // RL
            root->right = rightRotate(root->right);
            root = leftRotate(root);
        }
    }

    return root;
}

void inOrder(AVLNode* root){
    if(root==NULL) return;
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

void levelOrder(AVLNode* root){
    if(root==NULL) return;
    queue<AVLNode*> q; q.push(root);
    while(!q.empty()){
        int sz = q.size();
        while(sz--){
            auto f = q.front(); q.pop();
            cout << f->data << " ";
            if(f->left) q.push(f->left);
            if(f->right) q.push(f->right);
        }
        cout << "\n";
    }
}

int main()
{
    AVLNode* root = NULL;
    int x; while(cin>>x){
        root = insert(root, x);
        levelOrder(root);
    }
    //levelOrder(root);
    return 0;
}
