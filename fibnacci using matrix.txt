#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define vvll vector<vector<ll>>
#define vll vector<ll>

vvll readMat(){
    ll r, c; cin>>r>>c;
    vvll m(r, vll(c, 0));
    for(ll i=0; i<r; i++) for(ll j=0; j<c; j++) cin>>m[i][j];
    return m;
}

void printMat(vvll& m){
    ll r = m.size(), c = m[0].size();
    for(ll i=0; i<r; i++){
        for(ll j=0; j<c; j++) cout << m[i][j] << " ";
        cout << "\n";
    }
}

vvll multiplyMat(vvll& a, vvll& b){
    ll r1 = a.size(), c1 = a[0].size(), r2 = b.size(), c2 = b[0].size();
    vvll c(r1, vll(c2, 0));
    if(c1 != r2) return c;
    for(ll i=0; i<r1; i++){
        for(ll j=0; j<c2; j++){
            for(ll k=0; k<c1; k++){
                c[i][j] = c[i][j] + a[i][k]*b[k][j];
            }
        }
    }
    return c;
}
vvll getIdentityMat(ll n){ //create and return identity square mat n X n
    vvll m(n, vll(n, 0));
    for(ll i=0; i<n; i++)
        m[i][i] = 1;
    return m;
}
vvll fastMatPow(vvll& base, ll expo){ // sq mat
    ll n = base.size();
    auto ans = getIdentityMat(n);
    while(expo > 0){
        if(expo%2 == 1)
            ans = multiplyMat(ans, base);
        base = multiplyMat(base, base);
        expo = expo/2;
    }
    return ans;
}
int main()
{
    auto a = readMat();
    auto ans = fastMatPow(a, 12);
    printMat(ans);
    return 0;
    /*
    input read:
    2 2
    1 1 
    1 0
    
    */
}
