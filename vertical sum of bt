/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::verticalSum(TreeNode* root) {
    vector<int> ans;
        if(root==NULL)
         return ans;
        map<int,map<int,vector<int>>> nodes;
        queue<pair<TreeNode*,pair<int,int>>> q;
        q.push({root,{0,0}});
        while(!q.empty())
        {
            TreeNode* node = q.front().first;
            int vertical = q.front().second.first;
            int level = q.front().second.second;
            q.pop();
            nodes[vertical][level].push_back(node->val);
            if(node->left!=NULL)
             q.push({node->left,{vertical-1,level+1}});
            if(node->right!=NULL)
             q.push({node->right,{vertical+1,level+1}});
        }
        for(auto ele:nodes)
        {
            vector<int> col;
            for(auto q:ele.second)
            {
                col.insert(col.end(),q.second.begin(),q.second.end());
            }
            int s = 0;
            for(auto i:col)
            {
                s+=i;
            }
            ans.push_back(s);
        }
        return ans;
}
