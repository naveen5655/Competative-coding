#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

void dijkstra(int V, const vector<vector<int>>& edges, int src) {
    
    vector<pair<int, int>> adj[V];
    for (int i=0;i<edges.size();i++) {
        int u = edges[i][0], v = edges[i][1], w = edges[i][2];
        adj[u].push_back({v, w});
        // Uncomment the next line if the graph is undirected
        //adj[v].push_back({u, w});
    }

    vector<int> dist(V, INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    dist[src] = 0;
    pq.push({0, src});

    while (!pq.empty()) {
        int currDist = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        for (auto neighbor : adj[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (currDist + weight < dist[v]) {
                dist[v] = currDist + weight;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        cout << i << "\t" << dist[i] << "\n";
    }
}

int main() {
    int V, E;
    cin >> V >> E;

    vector<vector<int>> edges(E, vector<int>(3));
   // cout << "Enter the edges in the format [u v w]:\n";
    for (int i = 0; i < E; i++) {
        cin >> edges[i][0] >> edges[i][1] >> edges[i][2];
    }

    int src;
    cin >> src;

    dijkstra(V, edges, src);

    return 0;
}

/*

input:
5 6
0 1 2
0 3 1
1 2 4
1 3 3
3 4 6
2 4 5
0

output:
Vertex	Distance from Source
0	0
1	2
2	6
3	1
4	7

*/
