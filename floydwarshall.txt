#include <iostream>
#include <vector>
#include <climits>  // For INT_MAX

using namespace std;

void floydWarshall(vector<vector<int>>& dist, int V) {
    // Loop through each possible intermediate vertex
    for (int k = 0; k < V; ++k) {
        // Loop through each source vertex
        for (int i = 0; i < V; ++i) {
            // Loop through each destination vertex
            for (int j = 0; j < V; ++j) {
                // If a shorter path exists, update the distance
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX &&
                    dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
}

void printSolution(const vector<vector<int>>& dist, int V) {
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            if (dist[i][j] == INT_MAX)
                cout << "INF ";  // No path
            else
                cout << dist[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int V;  // Number of vertices
    cin >> V;

    vector<vector<int>> dist(V, vector<int>(V));

    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> dist[i][j];
            if (dist[i][j] == -1 && i != j) {
                dist[i][j] = INT_MAX;  // No path between i and j
            }
        }
    }

    // Call the Floyd-Warshall algorithm
    floydWarshall(dist, V);

    // Print the shortest distance matrix
    cout << "Shortest distance matrix:\n";
    printSolution(dist, V);

    return 0;
}

/* 

input: 4
0 3 -1 7
-1 0 1 -1
-1 -1 0 2
-1 4 -1 0

output:
Shortest distance matrix:
0 3 4 6 
INF 0 1 3 
INF 6 0 2 
INF 4 5 0 

*/
